{"version":3,"sources":["js/app.js","js/models/assessment.js","js/controllers/assessments.js","js/controllers/auth.js","js/models/bed.js","js/controllers/beds.js","js/controllers/main.js","js/models/patient.js","js/controllers/patients.js","js/models/poc.js","js/controllers/pocs.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","Assessment","$resource","id","update","method","AssessmentsIndexController","this","all","query","AssessmentsShowController","$state","User","Patient","addComment","Comment","save","assessmentsShow","comment","reload","favorite","assessment","$favorite","deleteAssessment","$remove","go","get","params","assessment_id","add","delete","AssessmentsEditController","assessmentsEdit","$update","RegisterController","$auth","submit","signup","register","user","then","LoginController","login","credentials","Bed","BedsIndexController","BedsShowController","bedsShow","bed","deleteBed","bed_id","BedsEditController","bedsEdit","MainController","$rootScope","logout","secureState","e","toState","main","message","stateName","name","isAuthenticated","protectedStates","includes","preventDefault","currentUserId","getPayload","isLoggedIn","console","log","userId","$on","addPatient","url","removePatient","PatientsIndexController","q","PatientsShowController","$stateParams","$location","patientsShow","patient","path","$addPatient","PatientsEditController","patientsEdit","PatientsNewController","createPatient","patientsNew","currentUser","Poc","PocsIndexController","PocsShowController","pocsShow","poc","deletePoc","poc_id","PocsEditController","pocsEdit","PocsNewController","createPoc","pocsNew","Router","$stateProvider","$urlRouterProvider","state","templateUrl","controller","otherwise","UsersIndexController","UsersShowController","isCurrentUser","parseFloat","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('bedBlockingProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('bedBlockingProject')\n  .factory('Assessment', Assessment);\n\nAssessment.$inject = ['$resource', 'API_URL'];\nfunction Assessment($resource, API_URL) {\n  return new $resource(`${API_URL}/assessments/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('AssessmentsIndexController', AssessmentsIndexController)\n  .controller('AssessmentsShowController', AssessmentsShowController)\n  .controller('AssessmentsEditController', AssessmentsEditController);\n\nAssessmentsIndexController.$inject = ['Assessment'];\nfunction AssessmentsIndexController(Assessment) {\n  const assessmentsIndex = this;\n  assessmentsIndex.all = Assessment.query();\n}\n\nAssessmentsShowController.$inject = ['Assessment', '$state', 'User', 'Patient'];\nfunction AssessmentsShowController(Assessment, $state, User, Patient) {\n  const assessmentsShow = this;\n\n  assessmentsShow.assessment = Assessment.get($state.params);\n\n  assessmentsShow.comment = {\n    assessment_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(assessmentsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  assessmentsShow.add = addComment;\n\n\n  function favorite() {\n    assessmentsShow.assessment.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  assessmentsShow.favorite = favorite;\n\n\n  function deleteAssessment() {\n    assessmentsShow.assessment.$remove(() => {\n      $state.go('assessmentsIndex');\n    });\n  }\n\n  assessmentsShow.delete = deleteAssessment;\n}\n\n\nAssessmentsEditController.$inject = ['Assessment', '$state'];\nfunction AssessmentsEditController(Assessment, $state) {\n  const assessmentsEdit = this;\n\n  assessmentsEdit.assessment = Assessment.get($state.params);\n\n  function update() {\n    assessmentsEdit.assessment.$update(() => {\n      $state.go('assessmentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('home');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('bedBlockingProject')\n  .factory('Bed', Bed);\n\nBed.$inject = ['$resource', 'API_URL'];\nfunction Bed($resource, API_URL) {\n  return new $resource(`${API_URL}/beds/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('BedsIndexController', BedsIndexController)\n  .controller('BedsShowController', BedsShowController)\n  .controller('BedsEditController', BedsEditController);\n\nBedsIndexController.$inject = ['Bed'];\nfunction BedsIndexController(Bed) {\n  const bedsIndex = this;\n  bedsIndex.all = Bed.query();\n}\n\nBedsShowController.$inject = ['Bed', '$state', 'User', 'Patient'];\nfunction BedsShowController(Bed, $state, User, Patient) {\n  const bedsShow = this;\n\n  bedsShow.bed = Bed.get($state.params);\n\n  bedsShow.comment = {\n    bed_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(bedsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  bedsShow.add = addComment;\n\n\n  function favorite() {\n    bedsShow.bed.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  bedsShow.favorite = favorite;\n\n\n  function deleteBed() {\n    bedsShow.bed.$remove(() => {\n      $state.go('bedsIndex');\n    });\n  }\n\n  bedsShow.delete = deleteBed;\n}\n\n\nBedsEditController.$inject = ['Bed', '$state'];\nfunction BedsEditController(Bed, $state) {\n  const bedsEdit = this;\n\n  bedsEdit.bed = Bed.get($state.params);\n\n  function update() {\n    bedsEdit.bed.$update(() => {\n      $state.go('bedsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  // $window.localStorage.setItem(currentUserId);\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  // main.userId = $auth.getPayload().id;\n  console.log(main.userId);\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        // localStorage.removeItem('currentUserId');\n        $state.go('home');\n\n      });\n  }\n\n  main.logout = logout;\n\n  main.message = null;\n  const protectedStates = ['usersEdit', 'usersNew', 'usersShow'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    main.stateName = toState.name;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n\n    if($auth.isAuthenticated()) {\n      main.currentUserId = $auth.getPayload().id;\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('bedBlockingProject')\n  .factory('Patient', Patient);\n\nPatient.$inject = ['$resource', 'API_URL'];\nfunction Patient($resource, API_URL) {\n  return new $resource(`${API_URL}/patients/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' },\n    addPatient: { method: 'POST', url: `${API_URL}/patients/:id` },\n    removePatient: { method: 'POST', url: `${API_URL}/users/:id` },\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('PatientsIndexController', PatientsIndexController)\n  .controller('PatientsShowController', PatientsShowController)\n  .controller('PatientsEditController', PatientsEditController)\n  .controller('PatientsNewController', PatientsNewController);\n\nPatientsIndexController.$inject = ['Patient', '$state', 'User'];\nfunction PatientsIndexController(Patient, $state, User) {\n  const patientsIndex = this;\n  patientsIndex.all = Patient.query({ q: $state.params.q });\n}\n\nPatientsShowController.$inject = ['Patient', '$state', 'User', '$stateParams', '$location'];\nfunction PatientsShowController(Patient, $state, User, $stateParams, $location) {\n  const patientsShow = this;\n\n  patientsShow.patient = Patient.get($state.params);\n\n  var urlRoute = $stateParams.id;\n  var urlCheck = $location.path();\n\n  patientsShow.id = {\n   id: $state.params.id\n  };\n\n  patientsShow.addPatient = function() {\n    patientsShow.patient.$addPatient(() => {\n      console.log('click');\n      $state.go('usersIndex');\n    });\n  }\n}\n\nPatientsEditController.$inject = ['Patient', '$state'];\nfunction PatientsEditController(Patient, $state) {\n  const patientsEdit = this;\n\n  patientsEdit.patient = Patient.get($state.params);\n\n  function update() {\n    patientsEdit.patient.$update(() => {\n      $state.go('patientsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\n\nPatientsNewController.$inject = ['Patient', '$state', '$auth'];\n\nfunction PatientsNewController(Patient, $state, $auth) {\n\n  const patientsNew = this;\n  const currentUser = $auth.getPayload().id;\n  patientsNew.patient = {};\n\n  patientsNew.patient.user = currentUser;\n\n  function createPatient() {\n\n    // get userId from payload\n    patientsNew.patient.user = $auth.getPayload().id;\n\n    Patient.save(patientsNew.patient, (patient) => {\n      $state.go('patientsShow', { id: patient.id });\n    });\n  }\n  patientsNew.createPatient = createPatient;\n}\n","angular.module('bedBlockingProject')\n  .factory('Poc', Poc);\n\nPoc.$inject = ['$resource', 'API_URL'];\nfunction Poc($resource, API_URL) {\n  return new $resource(`${API_URL}/pocs/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('PocsIndexController', PocsIndexController)\n  .controller('PocsShowController', PocsShowController)\n  .controller('PocsNewController', PocsNewController)\n  .controller('PocsEditController', PocsEditController);\n\nPocsIndexController.$inject = ['Poc'];\nfunction PocsIndexController(Poc) {\n  const pocsIndex = this;\n  pocsIndex.all = Poc.query();\n}\n\nPocsShowController.$inject = ['Poc', '$state', 'User', 'Patient'];\nfunction PocsShowController(Poc, $state, User, Patient) {\n  const pocsShow = this;\n\n  pocsShow.poc = Poc.get($state.params);\n\n  pocsShow.comment = {\n    poc_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(pocsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  pocsShow.add = addComment;\n\n\n  function favorite() {\n    pocsShow.poc.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  pocsShow.favorite = favorite;\n\n\n  function deletePoc() {\n    pocsShow.poc.$remove(() => {\n      $state.go('pocsIndex');\n    });\n  }\n\n  pocsShow.delete = deletePoc;\n}\n\n\nPocsEditController.$inject = ['Poc', '$state'];\nfunction PocsEditController(Poc, $state) {\n  const pocsEdit = this;\n\n  pocsEdit.poc = Poc.get($state.params);\n\n  function update() {\n    pocsEdit.poc.$update(() => {\n      $state.go('pocsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\n\nPocsNewController.$inject = ['Poc', '$state', '$auth'];\n\nfunction PocsNewController(Poc, $state, $auth) {\n\n  const pocsNew = this;\n  // console.log(patientsNew);\n  const currentUser = $auth.getPayload().id;\n  pocsNew.poc = {};\n\n  pocsNew.poc.user = currentUser;\n\n  function createPoc() {\n\n    // get userId from payload\n    pocsNew.poc.user = $auth.getPayload().id;\n    // console.log(patientsNew.patient.user)\n\n    Poc.save(pocsNew.poc, (poc) => {\n      $state.go('pocsShow', { id: poc.id });\n    });\n  }\n  pocsNew.createPoc = createPoc;\n}\n","angular.module('bedBlockingProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('bedsIndex', {\n      url: '/beds',\n      templateUrl: '/templates/bedsIndex.html',\n      controller: 'BedsIndexController as bedsIndex'\n    })\n    .state('pocsIndex', {\n      url: '/pocs',\n      templateUrl: '/templates/pocsIndex.html',\n      controller: 'PocsIndexController as pocsIndex'\n    })\n    .state('assessmentsIndex', {\n      url: '/assessments',\n      templateUrl: '/templates/assessmentsIndex.html',\n      controller: 'AssessmentsIndexController as assessmentsIndex'\n    })\n    .state('patientsIndex', {\n      url: '/patients?q',\n      templateUrl: '/templates/patientsIndex.html',\n      controller: 'PatientsIndexController as patientsIndex'\n    })\n    .state('patientsNew', {\n      url: '/patients/new',\n      templateUrl: '/templates/patientsNew.html',\n      controller: 'PatientsNewController as patientsNew'\n    })\n    .state('patientsShow', {\n      url: '/patients/:id',\n      templateUrl: '/templates/patientsShow.html',\n      controller: 'PatientsShowController as patientsShow'\n    })\n    .state('patientsSearch', {\n      url: '/search',\n      templateUrl: '/templates/patientsSearch.html',\n      controller: 'PatientsIndexController as patientsIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('home', {\n      url: '/home',\n      templateUrl: '/templates/home.html',\n      controller: 'PatientsIndexController as patientsIndex'\n    });\n\n  $urlRouterProvider.otherwise('/home');\n}\n","angular.module('bedBlockingProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'API_URL', 'Patient'];\nfunction UsersShowController(User, $state, $auth, API_URL, Patient) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n// get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n\n  usersShow.user = User.get($state.params);\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}