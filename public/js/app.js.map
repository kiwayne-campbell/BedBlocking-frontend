{"version":3,"sources":["js/app.js","js/models/assessment.js","js/controllers/assessments.js","js/controllers/auth.js","js/models/bed.js","js/controllers/beds.js","js/controllers/main.js","js/models/patient.js","js/controllers/patients.js","js/models/poc.js","js/controllers/pocs.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","Assessment","$resource","id","update","method","AssessmentsIndexController","assessmentsIndex","this","all","query","AssessmentsShowController","$state","User","Patient","addComment","Comment","save","assessmentsShow","comment","reload","favorite","assessment","$favorite","deleteAssessment","$remove","go","get","params","assessment_id","add","delete","AssessmentsEditController","assessmentsEdit","$update","RegisterController","$auth","submit","signup","register","user","then","LoginController","login","credentials","Bed","BedsIndexController","bedsIndex","BedsShowController","bedsShow","bed","deleteBed","bed_id","BedsEditController","bedsEdit","MainController","$rootScope","logout","secureState","e","toState","main","message","stateName","name","isAuthenticated","protectedStates","includes","preventDefault","currentUserId","getPayload","isLoggedIn","console","log","userId","$on","PatientsIndexController","patientsIndex","q","PatientsShowController","deletePatient","patientsShow","patient","PatientsEditController","patientsEdit","Poc","PocsIndexController","pocsIndex","PocsShowController","pocsShow","poc","deletePoc","poc_id","PocsEditController","pocsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","parseFloat","deleteUser","usersShow","unfavorite","festival","Festival","festivals","splice","indexOf","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('bedBlockingProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('bedBlockingProject')\n  .factory('Assessment', Assessment);\n\nAssessment.$inject = ['$resource', 'API_URL'];\nfunction Assessment($resource, API_URL) {\n  return new $resource(`${API_URL}/assessments/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('AssessmentsIndexController', AssessmentsIndexController)\n  .controller('AssessmentsShowController', AssessmentsShowController)\n  .controller('AssessmentsEditController', AssessmentsEditController);\n\nAssessmentsIndexController.$inject = ['Assessment'];\nfunction AssessmentsIndexController(Assessment) {\n  const assessmentsIndex = this;\n  assessmentsIndex.all = Assessment.query();\n}\n\nAssessmentsShowController.$inject = ['Assessment', '$state', 'User', 'Patient'];\nfunction AssessmentsShowController(Assessment, $state, User, Patient) {\n  const assessmentsShow = this;\n\n  assessmentsShow.assessment = Assessment.get($state.params);\n\n  assessmentsShow.comment = {\n    assessment_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(assessmentsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  assessmentsShow.add = addComment;\n\n\n  function favorite() {\n    assessmentsShow.assessment.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  assessmentsShow.favorite = favorite;\n\n\n  function deleteAssessment() {\n    assessmentsShow.assessment.$remove(() => {\n      $state.go('assessmentsIndex');\n    });\n  }\n\n  assessmentsShow.delete = deleteAssessment;\n}\n\n\nAssessmentsEditController.$inject = ['Assessment', '$state'];\nfunction AssessmentsEditController(Assessment, $state) {\n  const assessmentsEdit = this;\n\n  assessmentsEdit.assessment = Assessment.get($state.params);\n\n  function update() {\n    assessmentsEdit.assessment.$update(() => {\n      $state.go('assessmentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('bedBlockingProject')\n  .factory('Bed', Bed);\n\nBed.$inject = ['$resource', 'API_URL'];\nfunction Bed($resource, API_URL) {\n  return new $resource(`${API_URL}/beds/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('BedsIndexController', BedsIndexController)\n  .controller('BedsShowController', BedsShowController)\n  .controller('BedsEditController', BedsEditController);\n\nBedsIndexController.$inject = ['Bed'];\nfunction BedsIndexController(Bed) {\n  const bedsIndex = this;\n  bedsIndex.all = Bed.query();\n}\n\nBedsShowController.$inject = ['Bed', '$state', 'User', 'Patient'];\nfunction BedsShowController(Bed, $state, User, Patient) {\n  const bedsShow = this;\n\n  bedsShow.bed = Bed.get($state.params);\n\n  bedsShow.comment = {\n    bed_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(bedsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  bedsShow.add = addComment;\n\n\n  function favorite() {\n    bedsShow.bed.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  bedsShow.favorite = favorite;\n\n\n  function deleteBed() {\n    bedsShow.bed.$remove(() => {\n      $state.go('bedsIndex');\n    });\n  }\n\n  bedsShow.delete = deleteBed;\n}\n\n\nBedsEditController.$inject = ['Bed', '$state'];\nfunction BedsEditController(Bed, $state) {\n  const bedsEdit = this;\n\n  bedsEdit.bed = Bed.get($state.params);\n\n  function update() {\n    bedsEdit.bed.$update(() => {\n      $state.go('bedsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  // $window.localStorage.setItem(currentUserId);\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  // main.userId = $auth.getPayload().id;\n  console.log(main.userId);\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        // localStorage.removeItem('currentUserId');\n        $state.go('home');\n\n      });\n  }\n\n  main.logout = logout;\n\n  main.message = null;\n  const protectedStates = ['usersEdit', 'usersNew', 'usersShow'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    main.stateName = toState.name;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n\n    if($auth.isAuthenticated()) {\n      main.currentUserId = $auth.getPayload().id;\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('bedBlockingProject')\n  .factory('Patient', Patient);\n\nPatient.$inject = ['$resource', 'API_URL'];\nfunction Patient($resource, API_URL) {\n  return new $resource(`${API_URL}/patients/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('PatientsIndexController', PatientsIndexController)\n  .controller('PatientsShowController', PatientsShowController)\n  .controller('PatientsEditController', PatientsEditController);\n\nPatientsIndexController.$inject = ['Patient', '$state'];\nfunction PatientsIndexController(Patient, $state) {\n  const patientsIndex = this;\n  patientsIndex.all = Patient.query({ q: $state.params.q });\n}\n\nPatientsShowController.$inject = ['Patient', '$state', 'User'];\nfunction PatientsShowController(Patient, $state, User) {\n  const patientsShow = this;\n\n  patientsShow.patient = Patient.get($state.params);\n\n\n  function deletePatient() {\n    patientsShow.patient.$remove(() => {\n      $state.go('patientsIndex');\n    });\n  }\n\n  patientsShow.delete = deletePatient;\n}\n\n\nPatientsEditController.$inject = ['Patient', '$state'];\nfunction PatientsEditController(Patient, $state) {\n  const patientsEdit = this;\n\n  patientsEdit.patient = Patient.get($state.params);\n\n  function update() {\n    patientsEdit.patient.$update(() => {\n      $state.go('patientsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .factory('Poc', Poc);\n\nPoc.$inject = ['$resource', 'API_URL'];\nfunction Poc($resource, API_URL) {\n  return new $resource(`${API_URL}/pocs/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('PocsIndexController', PocsIndexController)\n  .controller('PocsShowController', PocsShowController)\n  .controller('PocsEditController', PocsEditController);\n\nPocsIndexController.$inject = ['Poc'];\nfunction PocsIndexController(Poc) {\n  const pocsIndex = this;\n  pocsIndex.all = Poc.query();\n}\n\nPocsShowController.$inject = ['Poc', '$state', 'User', 'Patient'];\nfunction PocsShowController(Poc, $state, User, Patient) {\n  const pocsShow = this;\n\n  pocsShow.poc = Poc.get($state.params);\n\n  pocsShow.comment = {\n    poc_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(pocsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  pocsShow.add = addComment;\n\n\n  function favorite() {\n    pocsShow.poc.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  pocsShow.favorite = favorite;\n\n\n  function deletePoc() {\n    pocsShow.poc.$remove(() => {\n      $state.go('pocsIndex');\n    });\n  }\n\n  pocsShow.delete = deletePoc;\n}\n\n\nPocsEditController.$inject = ['Poc', '$state'];\nfunction PocsEditController(Poc, $state) {\n  const pocsEdit = this;\n\n  pocsEdit.poc = Poc.get($state.params);\n\n  function update() {\n    pocsEdit.poc.$update(() => {\n      $state.go('pocsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('bedsIndex', {\n      url: '/beds',\n      templateUrl: '/templates/bedsIndex.html',\n      controller: 'BedsIndexController as bedsIndex'\n    })\n    .state('pocsIndex', {\n      url: '/pocs',\n      templateUrl: '/templates/pocsIndex.html',\n      controller: 'PocsIndexController as pocsIndex'\n    })\n    .state('assessmentsIndex', {\n      url: '/assessments',\n      templateUrl: '/templates/assessmentsIndex.html',\n      controller: 'AssessmentsIndexController as assessmentsIndex'\n    })\n    .state('patientsIndex', {\n      url: '/patients',\n      templateUrl: '/templates/patientsIndex.html',\n      controller: 'PatientsIndexController as patientsIndex'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('usersShow', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('patientsShow', {\n      url: '/patients/:id',\n      templateUrl: '/templates/patientsShow.html',\n      controller: 'PatientsShowController as patientsShow'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('bedBlockingProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'API_URL', 'Patient'];\nfunction UsersShowController(User, $state, $auth, API_URL, Patient) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n// get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  console.log(isCurrentUser);\n\n  usersShow.user = User.get($state.params);\n\n  console.log(usersShow.user);\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n\n\n  function unfavorite(festival) {\n    Festival.unfavorite({ id: festival.id }, () => {\n      usersShow.user.festivals.splice(usersShow.user.festivals.indexOf(festival), 1);\n    });\n  }\n\n  usersShow.unfavorite = unfavorite;\n\n\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\n\n\n// const currentUserId = $auth.getPayload().id;\n// console.log('currentUserId:', currentUserId);\n// usersShow.Edit = false;\n\n// wait until data has been returned from db to run function.\n// User.get($state.params).$promise.then((data) => {\n//   console.log(data);\n//   usersShow.user = data;\n//   allowUserToEdit();\n// });\n\n//prevent logged in user editing other users\n// function allowUserToEdit() {\n  // console.log('user to edit:', usersShow.user.id);\n  // console.log('currentUser:', currentUserId);\n//   if (usersShow.user.id === currentUserId) {\n//     usersShow.Edit = true;\n//     console.log('usersShow.user.id:',usersShow.user.id);\n//   }\n// }\n//\n// usersShow.allowUserToEdit = allowUserToEdit;\n"]}