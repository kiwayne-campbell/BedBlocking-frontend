{"version":3,"sources":["js/app.js","js/models/assessment.js","js/controllers/auth.js","js/models/bed.js","js/controllers/main.js","js/models/patient.js","js/controllers/patients.js","js/models/poc.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","Assessment","$resource","id","update","method","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Bed","MainController","$rootScope","logout","secureState","e","toState","main","message","stateName","name","isAuthenticated","protectedStates","includes","preventDefault","currentUserId","getPayload","isLoggedIn","console","log","userId","$on","Patient","FestivalsIndexController","Festival","$scope","festivalsIndex","all","query","q","params","featured","FestivalsShowController","Comment","User","addComment","save","festivalsShow","comment","reload","favorite","festival","$favorite","deleteFestival","$remove","get","festival_id","add","delete","FestivalsEditController","festivalsEdit","$update","Poc","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","parseFloat","deleteUser","usersShow","unfavorite","festivals","splice","indexOf","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .factory('Assessment', Assessment);\n\nAssessment.$inject = ['$resource', 'API_URL'];\nfunction Assessment($resource, API_URL) {\n  return new $resource(`${API_URL}/assesments/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Bed', Bed);\n\nBed.$inject = ['$resource', 'API_URL'];\nfunction Bed($resource, API_URL) {\n  return new $resource(`${API_URL}/beds/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  // $window.localStorage.setItem(currentUserId);\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  // main.userId = $auth.getPayload().id;\n  console.log(main.userId);\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        // localStorage.removeItem('currentUserId');\n        $state.go('home');\n\n      });\n  }\n\n  main.logout = logout;\n\n  main.message = null;\n  const protectedStates = ['usersEdit', 'usersNew', 'usersShow'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    main.stateName = toState.name;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n\n    if($auth.isAuthenticated()) {\n      main.currentUserId = $auth.getPayload().id;\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('finalProject')\n  .factory('Patient', Patient);\n\nPatient.$inject = ['$resource', 'API_URL'];\nfunction Patient($resource, API_URL) {\n  return new $resource(`${API_URL}/patients/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('FestivalsIndexController', FestivalsIndexController)\n  .controller('FestivalsShowController', FestivalsShowController)\n  .controller('FestivalsEditController', FestivalsEditController);\n\nFestivalsIndexController.$inject = ['Festival', '$state', '$scope'];\nfunction FestivalsIndexController(Festival, $state, $scope) {\n  const festivalsIndex = this;\n  festivalsIndex.all = Festival.query({ q: $state.params.q });\n  festivalsIndex.featured = Festival.featured();\n\n}\n\nFestivalsShowController.$inject = ['Festival', '$state', 'Comment', 'User'];\nfunction FestivalsShowController(Festival, $state, Comment, User) {\n  const festivalsShow = this;\n\n  festivalsShow.festival = Festival.get($state.params);\n\n  festivalsShow.comment = {\n    festival_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(festivalsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  festivalsShow.add = addComment;\n\n\n  function favorite() {\n    festivalsShow.festival.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  festivalsShow.favorite = favorite;\n\n\n  function deleteFestival() {\n    festivalsShow.festival.$remove(() => {\n      $state.go('festivalsIndex');\n    });\n  }\n\n  festivalsShow.delete = deleteFestival;\n}\n\n\nFestivalsEditController.$inject = ['Festival', '$state'];\nfunction FestivalsEditController(Festival, $state) {\n  const festivalsEdit = this;\n\n  festivalsEdit.festival = Festival.get($state.params);\n\n  function update() {\n    festivalsEdit.festival.$update(() => {\n      $state.go('festivalsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('Poc', Poc);\n\nPoc.$inject = ['$resource', 'API_URL'];\nfunction Poc($resource, API_URL) {\n  return new $resource(`${API_URL}/pocs/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'Festival', 'API_URL'];\nfunction UsersShowController(User, $state, $auth, Festival, API_URL) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n// get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  console.log(isCurrentUser);\n\n  usersShow.user = User.get($state.params);\n\n  console.log(usersShow.user);\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n\n\n  function unfavorite(festival) {\n    Festival.unfavorite({ id: festival.id }, () => {\n      usersShow.user.festivals.splice(usersShow.user.festivals.indexOf(festival), 1);\n    });\n  }\n\n  usersShow.unfavorite = unfavorite;\n\n\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\n\n\n// const currentUserId = $auth.getPayload().id;\n// console.log('currentUserId:', currentUserId);\n// usersShow.Edit = false;\n\n// wait until data has been returned from db to run function.\n// User.get($state.params).$promise.then((data) => {\n//   console.log(data);\n//   usersShow.user = data;\n//   allowUserToEdit();\n// });\n\n//prevent logged in user editing other users\n// function allowUserToEdit() {\n  // console.log('user to edit:', usersShow.user.id);\n  // console.log('currentUser:', currentUserId);\n//   if (usersShow.user.id === currentUserId) {\n//     usersShow.Edit = true;\n//     console.log('usersShow.user.id:',usersShow.user.id);\n//   }\n// }\n//\n// usersShow.allowUserToEdit = allowUserToEdit;\n"]}