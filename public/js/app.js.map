{"version":3,"sources":["js/app.js","js/models/assessment.js","js/controllers/assessments.js","js/controllers/auth.js","js/models/bed.js","js/controllers/beds.js","js/controllers/main.js","js/models/patient.js","js/controllers/patients.js","js/models/poc.js","js/controllers/pocs.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","Assessment","$resource","id","update","method","AssessmentsIndexController","$state","assessmentsIndex","this","all","query","q","params","featured","AssessmentsShowController","User","Patient","addComment","Comment","save","assessmentsShow","comment","reload","favorite","assessment","$favorite","deleteAssessment","$remove","go","get","assessment_id","add","delete","AssessmentsEditController","assessmentsEdit","$update","RegisterController","$auth","submit","signup","register","user","then","LoginController","login","credentials","Bed","BedsIndexController","bedsIndex","BedsShowController","bedsShow","bed","deleteBed","bed_id","BedsEditController","bedsEdit","MainController","$rootScope","logout","secureState","e","toState","main","message","stateName","name","isAuthenticated","protectedStates","includes","preventDefault","currentUserId","getPayload","isLoggedIn","console","log","userId","$on","PatientsIndexController","patientsIndex","PatientsShowController","patientsShow","patient","deletePatient","patient_id","PatientsEditController","patientsEdit","Poc","PocsIndexController","pocsIndex","PocsShowController","pocsShow","poc","deletePoc","poc_id","PocsEditController","pocsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","parseFloat","deleteUser","usersShow","unfavorite","festival","Festival","festivals","splice","indexOf","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('bedBlockingProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('bedBlockingProject')\n  .factory('Assessment', Assessment);\n\nAssessment.$inject = ['$resource', 'API_URL'];\nfunction Assessment($resource, API_URL) {\n  return new $resource(`${API_URL}/assesments/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('AssessmentsIndexController', AssessmentsIndexController)\n  .controller('AssessmentsShowController', AssessmentsShowController)\n  .controller('AssessmentsEditController', AssessmentsEditController);\n\nAssessmentsIndexController.$inject = ['Assessment', '$state'];\nfunction AssessmentsIndexController(Assessment, $state) {\n  const assessmentsIndex = this;\n  assessmentsIndex.all = Assessment.query({ q: $state.params.q });\n  assessmentsIndex.featured = Assessment.featured();\n\n}\n\nAssessmentsShowController.$inject = ['Assessment', '$state', 'User', 'Patient'];\nfunction AssessmentsShowController(Assessment, $state, User, Patient) {\n  const assessmentsShow = this;\n\n  assessmentsShow.assessment = Assessment.get($state.params);\n\n  assessmentsShow.comment = {\n    assessment_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(assessmentsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  assessmentsShow.add = addComment;\n\n\n  function favorite() {\n    assessmentsShow.assessment.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  assessmentsShow.favorite = favorite;\n\n\n  function deleteAssessment() {\n    assessmentsShow.assessment.$remove(() => {\n      $state.go('assessmentsIndex');\n    });\n  }\n\n  assessmentsShow.delete = deleteAssessment;\n}\n\n\nAssessmentsEditController.$inject = ['Assessment', '$state'];\nfunction AssessmentsEditController(Assessment, $state) {\n  const assessmentsEdit = this;\n\n  assessmentsEdit.assessment = Assessment.get($state.params);\n\n  function update() {\n    assessmentsEdit.assessment.$update(() => {\n      $state.go('assessmentsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('usersIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('bedBlockingProject')\n  .factory('Bed', Bed);\n\nBed.$inject = ['$resource', 'API_URL'];\nfunction Bed($resource, API_URL) {\n  return new $resource(`${API_URL}/beds/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('BedsIndexController', BedsIndexController)\n  .controller('BedsShowController', BedsShowController)\n  .controller('BedsEditController', BedsEditController);\n\nBedsIndexController.$inject = ['Bed', '$state'];\nfunction BedsIndexController(Bed, $state) {\n  const bedsIndex = this;\n  bedsIndex.all = Bed.query({ q: $state.params.q });\n  bedsIndex.featured = Bed.featured();\n\n}\n\nBedsShowController.$inject = ['Bed', '$state', 'User', 'Patient'];\nfunction BedsShowController(Bed, $state, User, Patient) {\n  const bedsShow = this;\n\n  bedsShow.bed = Bed.get($state.params);\n\n  bedsShow.comment = {\n    bed_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(bedsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  bedsShow.add = addComment;\n\n\n  function favorite() {\n    bedsShow.bed.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  bedsShow.favorite = favorite;\n\n\n  function deleteBed() {\n    bedsShow.bed.$remove(() => {\n      $state.go('bedsIndex');\n    });\n  }\n\n  bedsShow.delete = deleteBed;\n}\n\n\nBedsEditController.$inject = ['Bed', '$state'];\nfunction BedsEditController(Bed, $state) {\n  const bedsEdit = this;\n\n  bedsEdit.bed = Bed.get($state.params);\n\n  function update() {\n    bedsEdit.bed.$update(() => {\n      $state.go('bedsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  // $window.localStorage.setItem(currentUserId);\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  // main.userId = $auth.getPayload().id;\n  console.log(main.userId);\n\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        // localStorage.removeItem('currentUserId');\n        $state.go('home');\n\n      });\n  }\n\n  main.logout = logout;\n\n  main.message = null;\n  const protectedStates = ['usersEdit', 'usersNew', 'usersShow'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    main.stateName = toState.name;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n\n    if($auth.isAuthenticated()) {\n      main.currentUserId = $auth.getPayload().id;\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n}\n","angular.module('bedBlockingProject')\n  .factory('Patient', Patient);\n\nPatient.$inject = ['$resource', 'API_URL'];\nfunction Patient($resource, API_URL) {\n  return new $resource(`${API_URL}/patients/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('PatientsIndexController', PatientsIndexController)\n  .controller('PatientsShowController', PatientsShowController)\n  .controller('PatientsEditController', PatientsEditController);\n\nPatientsIndexController.$inject = ['Patient', '$state'];\nfunction PatientsIndexController(Patient, $state) {\n  const patientsIndex = this;\n  patientsIndex.all = Patient.query({ q: $state.params.q });\n  patientsIndex.featured = Patient.featured();\n\n}\n\nPatientsShowController.$inject = ['Patient', '$state', 'User'];\nfunction PatientsShowController(Patient, $state, User) {\n  const patientsShow = this;\n\n  patientsShow.patient = Patient.get($state.params);\n\n  patientsShow.comment = {\n    patient_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(patientsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  patientsShow.add = addComment;\n\n\n  function favorite() {\n    patientsShow.patient.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  patientsShow.favorite = favorite;\n\n\n  function deletePatient() {\n    patientsShow.patient.$remove(() => {\n      $state.go('patientsIndex');\n    });\n  }\n\n  patientsShow.delete = deletePatient;\n}\n\n\nPatientsEditController.$inject = ['Patient', '$state'];\nfunction PatientsEditController(Patient, $state) {\n  const patientsEdit = this;\n\n  patientsEdit.patient = Patient.get($state.params);\n\n  function update() {\n    patientsEdit.patient.$update(() => {\n      $state.go('patientsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .factory('Poc', Poc);\n\nPoc.$inject = ['$resource', 'API_URL'];\nfunction Poc($resource, API_URL) {\n  return new $resource(`${API_URL}/pocs/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('PocsIndexController', PocsIndexController)\n  .controller('PocsShowController', PocsShowController)\n  .controller('PocsEditController', PocsEditController);\n\nPocsIndexController.$inject = ['Poc', '$state'];\nfunction PocsIndexController(Poc, $state) {\n  const pocsIndex = this;\n  pocsIndex.all = Poc.query({ q: $state.params.q });\n  pocsIndex.featured = Poc.featured();\n\n}\n\nPocsShowController.$inject = ['Poc', '$state', 'User', 'Patient'];\nfunction PocsShowController(Poc, $state, User, Patient) {\n  const pocsShow = this;\n\n  pocsShow.poc = Poc.get($state.params);\n\n  pocsShow.comment = {\n    poc_id: $state.params.id\n  };\n\n  function addComment() {\n    Comment.save(pocsShow.comment, () => {\n      $state.reload();\n    });\n  }\n\n\n  pocsShow.add = addComment;\n\n\n  function favorite() {\n    pocsShow.poc.$favorite(() => {\n      $state.reload();\n    });\n  }\n  // add main-message- added to favourites!\n\n  pocsShow.favorite = favorite;\n\n\n  function deletePoc() {\n    pocsShow.poc.$remove(() => {\n      $state.go('pocsIndex');\n    });\n  }\n\n  pocsShow.delete = deletePoc;\n}\n\n\nPocsEditController.$inject = ['Poc', '$state'];\nfunction PocsEditController(Poc, $state) {\n  const pocsEdit = this;\n\n  pocsEdit.poc = Poc.get($state.params);\n\n  function update() {\n    pocsEdit.poc.$update(() => {\n      $state.go('pocsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('bedBlockingProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('usersEdit', {\n      url: '/users/:id',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('bedBlockingProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('bedBlockingProject')\n  .controller('UsersIndexController', UsersIndexController)\n  .controller('UsersShowController', UsersShowController)\n  .controller('UsersEditController', UsersEditController);\n\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth', 'API_URL', 'Patient'];\nfunction UsersShowController(User, $state, $auth, API_URL, Patient) {\n  const usersShow = this;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n// get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  console.log(isCurrentUser);\n\n  usersShow.user = User.get($state.params);\n\n  console.log(usersShow.user);\n\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n\n\n  function unfavorite(festival) {\n    Festival.unfavorite({ id: festival.id }, () => {\n      usersShow.user.festivals.splice(usersShow.user.festivals.indexOf(festival), 1);\n    });\n  }\n\n  usersShow.unfavorite = unfavorite;\n\n\n}\n\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n\n\n\n// const currentUserId = $auth.getPayload().id;\n// console.log('currentUserId:', currentUserId);\n// usersShow.Edit = false;\n\n// wait until data has been returned from db to run function.\n// User.get($state.params).$promise.then((data) => {\n//   console.log(data);\n//   usersShow.user = data;\n//   allowUserToEdit();\n// });\n\n//prevent logged in user editing other users\n// function allowUserToEdit() {\n  // console.log('user to edit:', usersShow.user.id);\n  // console.log('currentUser:', currentUserId);\n//   if (usersShow.user.id === currentUserId) {\n//     usersShow.Edit = true;\n//     console.log('usersShow.user.id:',usersShow.user.id);\n//   }\n// }\n//\n// usersShow.allowUserToEdit = allowUserToEdit;\n"]}